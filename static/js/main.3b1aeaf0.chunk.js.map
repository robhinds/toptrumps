{"version":3,"sources":["assets/cards/default.jpg","assets/cards/shark.jpg","assets/cards/jelly.jpg","logo.svg","components/card/index.js","components/modal/index.js","data/animaldata.js","containers/GameContainer.js","components/navbar/index.js","containers/NavBarContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","style","width","className","src","this","props","animalImage","unknownAnimal","waves","animalName","animalDescription","onClick","onClickPlay","animalStrength","animalSpeed","animalSize","animalLife","Component","Modal","isOpen","toggle","toggleModal","title","message","color","actionTitle","animalCards","shark","jelly","GameContainer","state","gameInProgress","playerCards","computerCards","interimResultModal","interimResultMessage","resultModal","shuffled","animals","sort","a","b","Math","random","midPoint","ceil","length","setState","slice","attribute","playerCard","computerCard","playerScore","computerScore","newPlayerCards","newComputerCards","console","log","push","finalMessage","NavBar","to","href","id","NavBarContainer","App","role","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b1aeaf0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default.784b71bf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/shark.928a6911.jpg\";","module.exports = __webpack_public_path__ + \"static/media/jelly.ec8fef48.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { MDBBtn, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol } from 'mdbreact';\nimport unknownAnimal from '../../assets/cards/default.jpg';\n\nexport default class Card extends Component {\n\n  render() {\n    return (\n      <MDBCol>\n        <MDBCard style={{ width: \"100%\" }}>\n          <MDBCardImage className=\"img-fluid\" src={this.props.animalImage || unknownAnimal} waves />\n          <MDBCardBody>\n            <MDBCardTitle>{this.props.animalName || 'No animal name yet'}</MDBCardTitle>\n            <MDBCardText>\n              {this.props.animalDescription || 'No animal description yet'}\n            </MDBCardText>\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"offset-2 col-8\">\n                  <MDBBtn onClick={() => this.props.onClickPlay(\"animalStrength\")} style={{width:\"100%\"}}>Strength: {this.props.animalStrength || '0'}</MDBBtn>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"offset-2 col-8\">\n                  <MDBBtn onClick={() => this.props.onClickPlay(\"animalSpeed\")} style={{width:\"100%\"}}>Speed: {this.props.animalSpeed || '0'}</MDBBtn>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"offset-2 col-8\">\n                  <MDBBtn onClick={() => this.props.onClickPlay(\"animalSize\")} style={{width:\"100%\"}}>Size: {this.props.animalSize || '0'}</MDBBtn>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"offset-2 col-8\">\n                  <MDBBtn onClick={() => this.props.onClickPlay(\"animalLife\")} style={{width:\"100%\"}}>Life: {this.props.animalLife || '0'}</MDBBtn>\n                </div>\n              </div>\n            </div>\n          </MDBCardBody>\n        </MDBCard>\n      </MDBCol>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from 'mdbreact';\nimport unknownAnimal from '../../assets/cards/default.jpg';\n\nexport default class Modal extends Component {\n\n  render() {\n    return (\n      <MDBContainer>\n        <MDBModal isOpen={this.props.isOpen} toggle={this.props.toggleModal}>\n          <MDBModalHeader toggle={this.props.toggleModal}>{this.props.title}</MDBModalHeader>\n          <MDBModalBody>\n            {this.props.message}\n          </MDBModalBody>\n          <MDBModalFooter>\n            <MDBBtn onClick={this.props.toggleModal} color=\"primary\">{this.props.actionTitle}</MDBBtn>\n          </MDBModalFooter>\n        </MDBModal>\n      </MDBContainer>\n      );\n  }\n}\n","import shark from '../assets/cards/shark.jpg';\nimport jelly from '../assets/cards/jelly.jpg';\n\nconst animalCards = [\n  {\n    animalImage: shark,\n    animalName: \"Great white shark\",\n    animalDescription: \"A big scary shark\",\n    animalStrength: 100,\n    animalSpeed: 60,\n    animalSize: 70,\n    animalLife: 30\n  },\n  {\n    animalImage: jelly,\n    animalName: \"Jellyfish\",\n    animalDescription: \"wibble wobble\",\n    animalStrength: 10,\n    animalSpeed: 40,\n    animalSize: 10,\n    animalLife: 50\n  },\n  {\n    animalImage: shark,\n    animalName: \"Great white shark\",\n    animalDescription: \"A big scary shark\",\n    animalStrength: 100,\n    animalSpeed: 60,\n    animalSize: 70,\n    animalLife: 30\n  },\n  {\n    animalImage: jelly,\n    animalName: \"Jellyfish\",\n    animalDescription: \"wibble wobble\",\n    animalStrength: 10,\n    animalSpeed: 40,\n    animalSize: 10,\n    animalLife: 50\n  }\n\n]\n\n\nexport default animalCards\n","import React, { Fragment, Component } from 'react';\nimport Card from '../components/card';\nimport Modal from '../components/modal';\nimport animals from '../data/animaldata';\nimport { MDBContainer, MDBAlert } from 'mdbreact';\n\nexport default class GameContainer extends Component {\n  state = {\n    gameInProgress: true,\n    playerCards: [],\n    computerCards: [],\n    interimResultModal: false,\n    interimResultMessage: \"\",\n    resultModal: false\n  }\n\n  componentDidMount() {\n    //1. shuffle the cards\n    //2. split them between player one and two\n    const shuffled = animals.sort((a,b) => 0.5 - Math.random())\n    const midPoint = Math.ceil(shuffled.length/2)\n    this.setState({\n      playerCards: shuffled.slice(0, midPoint),\n      computerCards: shuffled.slice(midPoint)\n    })\n  }\n\n  render() {\n    const { gameInProgress, playerCards, computerCards, interimResultModal, interimResultMessage, resultModal } = this.state\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-sm-2\"></div>\n          <div className=\"col-sm-8\">\n            <MDBAlert color=\"success\" >\n              Your cards remaining: {playerCards.length} (your opponent has {computerCards.length} remaining)\n            </MDBAlert>\n            <Card {...playerCards[0]}\n              onClickPlay={(attribute) => {\n                const playerCard = playerCards[0]\n                const computerCard = computerCards[0]\n                const playerScore = playerCard[attribute]\n                const computerScore = computerCard[attribute]\n                var message = \"\"\n                var newPlayerCards = []\n                var newComputerCards = []\n                console.log(\"SCORES: \" + playerScore + \" vs \" + computerScore)\n                if (playerScore >= computerScore) {\n                  newPlayerCards = playerCards.slice(1)\n                  newPlayerCards.push(playerCard)\n                  newPlayerCards.push(computerCard)\n                  newComputerCards = computerCards.slice(1)\n                  message = (\"Woohoo! Your \" + playerCard.animalName + \" beat the opponents \"\n                    + computerCard.animalName + \" \" + playerScore + \" vs \" + computerScore)\n                } else {\n                  newComputerCards = computerCards.slice(1)\n                  newComputerCards.push(playerCard)\n                  newComputerCards.push(computerCard)\n                  newPlayerCards = computerCards.slice(1)\n                  message = (\"Oh no! Your \" + playerCard.animalName + \" was beaten by your opponents \"\n                    + computerCard.animalName + \" \" + playerScore + \" vs \" + computerScore)\n                }\n                if (!newPlayerCards.length || !newComputerCards.length) {\n                  const finalMessage = newComputerCards.length ?\n                    \"Sorry, you are all out of cards, your oppoent has won this time! Why not play again?\"\n                    : \"Woohoo, you won the game, your opponent has lost all their cards!\"\n                  this.setState({\n                    resultModal: true,\n                    interimResultMessage: finalMessage\n                  })\n                } else {\n                  this.setState({\n                    interimResultModal: true,\n                    interimResultMessage: message,\n                    playerCards: newPlayerCards,\n                    computerCards: newComputerCards\n                  })\n                }\n              }}\n            />\n          </div>\n          <Modal isOpen={interimResultModal}\n            title=\"Battled!\"\n            actionTitle=\"Next round\"\n            message={interimResultMessage}\n            toggleModal={() => this.setState({interimResultModal: (!interimResultModal), interimResultMessage: \"\"}) }\n          />\n          <Modal isOpen={resultModal}\n            title=\"Game Over!\"\n            actionTitle=\"Restart game\"\n            message={interimResultMessage}\n            toggleModal={() => {\n              const shuffled = animals.sort((a,b) => 0.5 - Math.random())\n              const midPoint = Math.ceil(shuffled.length/2)\n              this.setState({\n                resultModal: (!resultModal),\n                interimResultMessage: \"\",\n                playerCards: shuffled.slice(0, midPoint),\n                computerCards: shuffled.slice(midPoint)\n              })\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\n\nexport default class NavBar extends Component {\n\n  render() {\n    return (\n      <header>\n        <nav className=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\n          <Link to=\"/play\" className=\"navbar-brand\" href=\"#\">\n            Main title\n          </Link>\n          <div className=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n          </div>\n        </nav>\n      </header>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport NavBar from '../components/navbar';\n\nexport default class NavBarContainer extends Component {\n  render() {\n    return <NavBar />;\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport { Route, Redirect } from \"react-router-dom\";\nimport GameContainer from './containers/GameContainer.js'\nimport NavBarContainer from './containers/NavBarContainer.js'\n\nfunction App() {\n  return (\n    <div className=\"App\" >\n      <NavBarContainer />\n      <main role=\"main\" >\n        <Route exact path=\"/\" render={() => <Redirect to=\"/play\" />} />\n        <Route exact path=\"/play\" component={GameContainer} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter } from 'react-router-dom'\nimport './App.css';\n\nReactDOM.render((\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n), document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}